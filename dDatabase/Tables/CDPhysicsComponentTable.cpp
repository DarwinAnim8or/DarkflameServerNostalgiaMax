#include "CDPhysicsComponentTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.276090
//DO NOT EDIT THIS FILE MANUALLY!

CDPhysicsComponentTable::CDPhysicsComponentTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM PhysicsComponent");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM PhysicsComponent");
	while (!tableData.eof()) {
		CDPhysicsComponent entry;
		entry.id = tableData.getIntField(0, int{});
		entry.isStatic = tableData.getFloatField(1, float{});
		entry.physics_asset = tableData.getStringField(2, std::string{}.c_str());
		entry.jump = tableData.getFloatField(3, float{});
		entry.doublejump = tableData.getFloatField(4, float{});
		entry.speed = tableData.getFloatField(5, float{});
		entry.rotSpeed = tableData.getFloatField(6, float{});
		entry.playerHeight = tableData.getFloatField(7, float{});
		entry.playerRadius = tableData.getFloatField(8, float{});
		entry.pcShapeType = tableData.getIntField(9, int{});
		entry.collisionGroup = tableData.getIntField(10, int{});
		entry.airSpeed = tableData.getFloatField(11, float{});
		entry.boundaryAsset = tableData.getStringField(12, std::string{}.c_str());
		entry.jumpAirSpeed = tableData.getFloatField(13, float{});
		entry.friction = tableData.getFloatField(14, float{});
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDPhysicsComponentTable::~CDPhysicsComponentTable() {
}

std::string CDPhysicsComponentTable::GetName(void) const {
	return "PhysicsComponent";
}

std::vector<CDPhysicsComponent> CDPhysicsComponentTable::Query(std::function<bool(CDPhysicsComponent)> predicate) {
	std::vector<CDPhysicsComponent> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDPhysicsComponent> CDPhysicsComponentTable::GetEntries(void) const {
	return this->m_entries;
}
