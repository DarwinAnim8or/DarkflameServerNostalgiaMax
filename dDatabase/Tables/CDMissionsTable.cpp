#include "CDMissionsTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.212261
//DO NOT EDIT THIS FILE MANUALLY!

CDMissions CDMissionsTable::Default = {};

CDMissionsTable::CDMissionsTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM Missions");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM Missions");
	while (!tableData.eof()) {
		CDMissions entry;
		entry.id = tableData.getIntField(0, int{});
		entry.name = tableData.getStringField(1, std::string{}.c_str());
		entry.defined_type = tableData.getStringField(2, std::string{}.c_str());
		entry.defined_subtype = tableData.getStringField(3, std::string{}.c_str());
		entry.offer_objectID = tableData.getIntField(4, int{});
		entry.target_objectID = tableData.getIntField(5, int{});
		entry.reward_currency = tableData.getInt64Field(6, uint64_t{});
		entry.LegoScore = tableData.getIntField(7, int{});
		entry.reward_reputation = tableData.getInt64Field(8, uint64_t{});
		entry.isChoiceReward = tableData.getIntField(9, bool{});
		entry.reward_item1 = tableData.getIntField(10, int{});
		entry.reward_item1_count = tableData.getIntField(11, int{});
		entry.reward_item2 = tableData.getIntField(12, int{});
		entry.reward_item2_count = tableData.getIntField(13, int{});
		entry.reward_item3 = tableData.getIntField(14, int{});
		entry.reward_item3_count = tableData.getIntField(15, int{});
		entry.reward_item4 = tableData.getIntField(16, int{});
		entry.reward_item4_count = tableData.getIntField(17, int{});
		entry.reward_emote = tableData.getIntField(18, int{});
		entry.reward_emote2 = tableData.getIntField(19, int{});
		entry.reward_emote3 = tableData.getIntField(20, int{});
		entry.reward_emote4 = tableData.getIntField(21, int{});
		entry.reward_maximagination = tableData.getIntField(22, int{});
		entry.reward_maxhealth = tableData.getIntField(23, int{});
		entry.reward_maxinventory = tableData.getIntField(24, int{});
		entry.reward_maxmodel = tableData.getIntField(25, int{});
		entry.reward_maxwidget = tableData.getIntField(26, int{});
		entry.reward_maxwallet = tableData.getInt64Field(27, uint64_t{});
		entry.repeatable = tableData.getIntField(28, bool{});
		entry.reward_currency_repeatable = tableData.getInt64Field(29, uint64_t{});
		entry.reward_item1_repeatable = tableData.getIntField(30, int{});
		entry.reward_item1_repeat_count = tableData.getIntField(31, int{});
		entry.reward_item2_repeatable = tableData.getIntField(32, int{});
		entry.reward_item2_repeat_count = tableData.getIntField(33, int{});
		entry.reward_item3_repeatable = tableData.getIntField(34, int{});
		entry.reward_item3_repeat_count = tableData.getIntField(35, int{});
		entry.reward_item4_repeatable = tableData.getIntField(36, int{});
		entry.reward_item4_repeat_count = tableData.getIntField(37, int{});
		entry.requirement_mission = tableData.getIntField(38, int{});
		entry.time_limit = tableData.getIntField(39, int{});
		entry.isMission = tableData.getIntField(40, bool{});
		entry.missionIconID = tableData.getIntField(41, int{});
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDMissionsTable::~CDMissionsTable() {
}

std::string CDMissionsTable::GetName(void) const {
	return "Missions";
}

std::vector<CDMissions> CDMissionsTable::Query(std::function<bool(CDMissions)> predicate) {
	std::vector<CDMissions> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDMissions> CDMissionsTable::GetEntries(void) const {
	return this->m_entries;
}

const CDMissions* CDMissionsTable::GetPtrByMissionID(uint32_t missionID) const {
	for (const auto& entry : m_entries) {
		if (entry.id == missionID) {
			return const_cast<CDMissions*>(&entry);
		}
	}

	return &Default;
}

const CDMissions& CDMissionsTable::GetByMissionID(uint32_t missionID, bool& found) const {
	for (const auto& entry : m_entries) {
		if (entry.id == missionID) {
			found = true;

			return entry;
		}
	}

	found = false;

	return Default;
}