#include "CDAnimationsTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:32.869897
//DO NOT EDIT THIS FILE MANUALLY!

CDAnimationsTable::CDAnimationsTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM Animations");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM Animations");
	while (!tableData.eof()) {
		CDAnimations entry;
		entry.animationGroupID = tableData.getIntField(0, int{});
		entry.animation_type = tableData.getStringField(1, std::string{}.c_str());
		entry.animation_name = tableData.getStringField(2, std::string{}.c_str());
		entry.chance_to_play = tableData.getFloatField(3, float{});
		entry.min_loops = tableData.getIntField(4, int{});
		entry.max_loops = tableData.getIntField(5, int{});
		entry.animation_length = tableData.getFloatField(6, float{});
		entry.sound1 = tableData.getStringField(7, std::string{}.c_str());
		entry.sound2 = tableData.getStringField(8, std::string{}.c_str());
		entry.sound3 = tableData.getStringField(9, std::string{}.c_str());
		entry.sound4 = tableData.getStringField(10, std::string{}.c_str());
		entry.sound5 = tableData.getStringField(11, std::string{}.c_str());
		entry.leftSound = tableData.getStringField(12, std::string{}.c_str());
		entry.rightSound = tableData.getStringField(13, std::string{}.c_str());
		entry.hideEquip = tableData.getIntField(14, bool{});
		entry.ignoreUpperBody = tableData.getIntField(15, bool{});
		entry.restartable = tableData.getIntField(16, bool{});
		entry.face_animation_name = tableData.getStringField(17, std::string{}.c_str());
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDAnimationsTable::~CDAnimationsTable() {
}

std::string CDAnimationsTable::GetName(void) const {
	return "Animations";
}

std::vector<CDAnimations> CDAnimationsTable::Query(std::function<bool(CDAnimations)> predicate) {
	std::vector<CDAnimations> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDAnimations> CDAnimationsTable::GetEntries(void) const {
	return this->m_entries;
}
