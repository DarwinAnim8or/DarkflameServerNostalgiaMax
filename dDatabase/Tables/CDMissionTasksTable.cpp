#include "CDMissionTasksTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.216250
//DO NOT EDIT THIS FILE MANUALLY!

CDMissionTasksTable::CDMissionTasksTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM MissionTasks");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM MissionTasks");
	while (!tableData.eof()) {
		CDMissionTasks entry;
		entry.id = tableData.getIntField(0, int{});
		entry.taskType = tableData.getIntField(1, int{});
		entry.target = tableData.getIntField(2, int{});
		entry.targetGroup = tableData.getStringField(3, std::string{}.c_str());
		entry.targetValue = tableData.getIntField(4, int{});
		entry.taskParam1 = tableData.getStringField(5, std::string{}.c_str());
		entry.description = tableData.getStringField(6, std::string{}.c_str());
		entry.largeTaskIcon = tableData.getStringField(7, std::string{}.c_str());
		entry.IconID = tableData.getIntField(8, int{});
		entry.uid = tableData.getIntField(9, int{});
		entry.largeTaskIconID = tableData.getIntField(10, int{});
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDMissionTasksTable::~CDMissionTasksTable() {
}

std::string CDMissionTasksTable::GetName(void) const {
	return "MissionTasks";
}

std::vector<CDMissionTasks> CDMissionTasksTable::Query(std::function<bool(CDMissionTasks)> predicate) {
	std::vector<CDMissionTasks> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDMissionTasks> CDMissionTasksTable::GetEntries(void) const {
	return this->m_entries;
}

std::vector<CDMissionTasks*> CDMissionTasksTable::GetByMissionID(uint32_t missionID) {
	std::vector<CDMissionTasks*> tasks;

	for (auto& entry : this->m_entries) {
		if (entry.id == missionID) {
			CDMissionTasks* task = const_cast<CDMissionTasks*>(&entry);

			tasks.push_back(task);
		}
	}

	return tasks;
}