#include "CDActivitiesTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:32.846608
//DO NOT EDIT THIS FILE MANUALLY!

CDActivitiesTable::CDActivitiesTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM Activities");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM Activities");
	while (!tableData.eof()) {
		CDActivities entry;
		entry.ActivityID = tableData.getIntField(0, int{});
		entry.Description = tableData.getStringField(1, std::string{}.c_str());
		entry.ActivityName = tableData.getStringField(2, std::string{}.c_str());
		entry.scoreName = tableData.getStringField(3, std::string{}.c_str());
		entry.value1Name = tableData.getStringField(4, std::string{}.c_str());
		entry.value2Name = tableData.getStringField(5, std::string{}.c_str());
		entry.scoreSort = tableData.getIntField(6, bool{});
		entry.value1Sort = tableData.getIntField(7, bool{});
		entry.value2Sort = tableData.getIntField(8, bool{});
		entry.instanceMapID = tableData.getIntField(9, int{});
		entry.minTeams = tableData.getIntField(10, int{});
		entry.maxTeams = tableData.getIntField(11, int{});
		entry.minTeamSize = tableData.getIntField(12, int{});
		entry.maxTeamSize = tableData.getIntField(13, int{});
		entry.waitTime = tableData.getIntField(14, int{});
		entry.startDelay = tableData.getIntField(15, int{});
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDActivitiesTable::~CDActivitiesTable() {
}

std::string CDActivitiesTable::GetName(void) const {
	return "Activities";
}

std::vector<CDActivities> CDActivitiesTable::Query(std::function<bool(CDActivities)> predicate) {
	std::vector<CDActivities> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDActivities> CDActivitiesTable::GetEntries(void) const {
	return this->m_entries;
}
