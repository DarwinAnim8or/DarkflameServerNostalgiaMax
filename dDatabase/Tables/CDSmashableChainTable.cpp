#include "CDSmashableChainTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.417711
//DO NOT EDIT THIS FILE MANUALLY!

CDSmashableChainTable::CDSmashableChainTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM SmashableChain");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM SmashableChain");
	while (!tableData.eof()) {
		CDSmashableChain entry;
		entry.chainIndex = tableData.getIntField(0, int{});
		entry.chainLevel = tableData.getIntField(1, int{});
		entry.lootMatrixID = tableData.getIntField(2, int{});
		entry.rarityTableIndex = tableData.getIntField(3, int{});
		entry.currencyIndex = tableData.getIntField(4, int{});
		entry.currencyLevel = tableData.getIntField(5, int{});
		entry.smashCount = tableData.getIntField(6, int{});
		entry.timeLimit = tableData.getIntField(7, int{});
		entry.chainStepID = tableData.getIntField(8, int{});
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDSmashableChainTable::~CDSmashableChainTable() {
}

std::string CDSmashableChainTable::GetName(void) const {
	return "SmashableChain";
}

std::vector<CDSmashableChain> CDSmashableChainTable::Query(std::function<bool(CDSmashableChain)> predicate) {
	std::vector<CDSmashableChain> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDSmashableChain> CDSmashableChainTable::GetEntries(void) const {
	return this->m_entries;
}
