#pragma once
#include "CDTable.h"

//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.210761
//DO NOT EDIT THIS FILE MANUALLY!

struct CDMissions {
	int id;
	std::string name;
	std::string defined_type;
	std::string defined_subtype;
	int offer_objectID;
	int target_objectID;
	uint64_t reward_currency;
	int LegoScore;
	uint64_t reward_reputation;
	bool isChoiceReward;
	int reward_item1;
	int reward_item1_count;
	int reward_item2;
	int reward_item2_count;
	int reward_item3;
	int reward_item3_count;
	int reward_item4;
	int reward_item4_count;
	int reward_emote;
	int reward_emote2;
	int reward_emote3;
	int reward_emote4;
	int reward_maximagination;
	int reward_maxhealth;
	int reward_maxinventory;
	int reward_maxmodel;
	int reward_maxwidget;
	uint64_t reward_maxwallet;
	bool repeatable;
	uint64_t reward_currency_repeatable;
	int reward_item1_repeatable;
	int reward_item1_repeat_count;
	int reward_item2_repeatable;
	int reward_item2_repeat_count;
	int reward_item3_repeatable;
	int reward_item3_repeat_count;
	int reward_item4_repeatable;
	int reward_item4_repeat_count;
	int requirement_mission;
	int time_limit;
	bool isMission;
	int missionIconID;
};

class CDMissionsTable : public CDTable {
private:
	std::vector<CDMissions> m_entries;
public:
	CDMissionsTable();
	~CDMissionsTable();
	std::string GetName(void) const override;

	std::vector<CDMissions> Query(std::function<bool(CDMissions)> predicate);
	std::vector<CDMissions> GetEntries(void) const;

	const CDMissions* GetPtrByMissionID(uint32_t missionID) const;

	const CDMissions& GetByMissionID(uint32_t missionID, bool& found) const;
	static CDMissions Default;
};
