#include "CDtesttable2Table.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.452620
//DO NOT EDIT THIS FILE MANUALLY!

CDtesttable2Table::CDtesttable2Table() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM testtable2");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM testtable2");
	while (!tableData.eof()) {
		CDtesttable2 entry;
		entry.id = tableData.getIntField(0, int{});
		entry.realVal = tableData.getFloatField(1, float{});
		entry.varCharVal = tableData.getStringField(2, std::string{}.c_str());
		entry.intVal = tableData.getIntField(3, int{});
		entry.int64val = tableData.getInt64Field(4, uint64_t{});
		entry.bitVal = tableData.getIntField(5, bool{});
		entry.smallVal = tableData.getIntField(6, int{});
		entry.tinyVal = tableData.getIntField(7, int{});
		entry.doubleVal = tableData.getFloatField(8, float{});
		//entry.binaryVal = tableData.getvarbinaryField(9, varbinary{});
		entry.timeVal = tableData.getStringField(10, std::string{}.c_str());
		entry.charVal = tableData.getStringField(11, std::string{}.c_str());
		entry.name = tableData.getStringField(12, std::string{}.c_str());
		entry.nameLONG = tableData.getStringField(13, std::string{}.c_str());
		entry.nameShort = tableData.getStringField(14, std::string{}.c_str());
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDtesttable2Table::~CDtesttable2Table() {
}

std::string CDtesttable2Table::GetName(void) const {
	return "testtable2";
}

std::vector<CDtesttable2> CDtesttable2Table::Query(std::function<bool(CDtesttable2)> predicate) {
	std::vector<CDtesttable2> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDtesttable2> CDtesttable2Table::GetEntries(void) const {
	return this->m_entries;
}
