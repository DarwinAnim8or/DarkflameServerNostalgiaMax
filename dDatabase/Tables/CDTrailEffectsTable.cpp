#include "CDTrailEffectsTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.464585
//DO NOT EDIT THIS FILE MANUALLY!

CDTrailEffectsTable::CDTrailEffectsTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM TrailEffects");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM TrailEffects");
	while (!tableData.eof()) {
		CDTrailEffects entry;
		entry.trailID = tableData.getIntField(0, int{});
		entry.description = tableData.getStringField(1, std::string{}.c_str());
		entry.textureName = tableData.getStringField(2, std::string{}.c_str());
		entry.blendmode = tableData.getIntField(3, int{});
		entry.cardlifetime = tableData.getFloatField(4, float{});
		entry.colorlifetime = tableData.getFloatField(5, float{});
		entry.minTailFade = tableData.getFloatField(6, float{});
		entry.tailFade = tableData.getFloatField(7, float{});
		entry.max_particles = tableData.getIntField(8, int{});
		entry.birthDelay = tableData.getFloatField(9, float{});
		entry.deathDelay = tableData.getFloatField(10, float{});
		entry.bone1 = tableData.getStringField(11, std::string{}.c_str());
		entry.bone2 = tableData.getStringField(12, std::string{}.c_str());
		entry.texLength = tableData.getFloatField(13, float{});
		entry.texWidth = tableData.getFloatField(14, float{});
		entry.startColorR = tableData.getFloatField(15, float{});
		entry.startColorG = tableData.getFloatField(16, float{});
		entry.startColorB = tableData.getFloatField(17, float{});
		entry.startColorA = tableData.getFloatField(18, float{});
		entry.middleColorR = tableData.getFloatField(19, float{});
		entry.middleColorG = tableData.getFloatField(20, float{});
		entry.middleColorB = tableData.getFloatField(21, float{});
		entry.middleColorA = tableData.getFloatField(22, float{});
		entry.endColorR = tableData.getFloatField(23, float{});
		entry.endColorG = tableData.getFloatField(24, float{});
		entry.endColorB = tableData.getFloatField(25, float{});
		entry.endColorA = tableData.getFloatField(26, float{});
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDTrailEffectsTable::~CDTrailEffectsTable() {
}

std::string CDTrailEffectsTable::GetName(void) const {
	return "TrailEffects";
}

std::vector<CDTrailEffects> CDTrailEffectsTable::Query(std::function<bool(CDTrailEffects)> predicate) {
	std::vector<CDTrailEffects> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDTrailEffects> CDTrailEffectsTable::GetEntries(void) const {
	return this->m_entries;
}
