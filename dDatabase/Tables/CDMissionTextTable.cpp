#include "CDMissionTextTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.220239
//DO NOT EDIT THIS FILE MANUALLY!

CDMissionTextTable::CDMissionTextTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM MissionText");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM MissionText");
	while (!tableData.eof()) {
		CDMissionText entry;
		entry.id = tableData.getIntField(0, int{});
		entry.description = tableData.getStringField(1, std::string{}.c_str());
		entry.offer = tableData.getStringField(2, std::string{}.c_str());
		entry.in_progress = tableData.getStringField(3, std::string{}.c_str());
		entry.ready_to_complete = tableData.getStringField(4, std::string{}.c_str());
		entry.story_icon = tableData.getStringField(5, std::string{}.c_str());
		entry.completion_fail_tip = tableData.getStringField(6, std::string{}.c_str());
		entry.completion_succeed_tip = tableData.getStringField(7, std::string{}.c_str());
		entry.chat_state_1 = tableData.getStringField(8, std::string{}.c_str());
		entry.chat_state_2 = tableData.getStringField(9, std::string{}.c_str());
		entry.chat_state_3 = tableData.getStringField(10, std::string{}.c_str());
		entry.chat_state_4 = tableData.getStringField(11, std::string{}.c_str());
		entry.missionIcon = tableData.getStringField(12, std::string{}.c_str());
		entry.offerNPCIcon = tableData.getStringField(13, std::string{}.c_str());
		entry.IconID = tableData.getIntField(14, int{});
		entry.accept_chat_bubble = tableData.getStringField(15, std::string{}.c_str());
		entry.offer_repeatable = tableData.getStringField(16, std::string{}.c_str());
		entry.bubble_prereq_not_met = tableData.getStringField(17, std::string{}.c_str());
		entry.chat_state_3_turnin = tableData.getStringField(18, std::string{}.c_str());
		entry.chat_state_4_turnin = tableData.getStringField(19, std::string{}.c_str());
		entry.state_1_anim = tableData.getStringField(20, std::string{}.c_str());
		entry.state_2_anim = tableData.getStringField(21, std::string{}.c_str());
		entry.state_3_anim = tableData.getStringField(22, std::string{}.c_str());
		entry.state_4_anim = tableData.getStringField(23, std::string{}.c_str());
		entry.state_3_turnin_anim = tableData.getStringField(24, std::string{}.c_str());
		entry.state_4_turnin_anim = tableData.getStringField(25, std::string{}.c_str());
		entry.onclick_anim = tableData.getStringField(26, std::string{}.c_str());
		entry.CinematicAccepted = tableData.getStringField(27, std::string{}.c_str());
		entry.CinematicAcceptedLeadin = tableData.getFloatField(28, float{});
		entry.CinematicCompleted = tableData.getStringField(29, std::string{}.c_str());
		entry.CinematicCompletedLeadin = tableData.getFloatField(30, float{});
		entry.CinematicRepeatable = tableData.getStringField(31, std::string{}.c_str());
		entry.CinematicRepeatableLeadin = tableData.getFloatField(32, float{});
		entry.CinematicRepeatableCompleted = tableData.getStringField(33, std::string{}.c_str());
		entry.CinematicRepeatableCompletedLeadin = tableData.getFloatField(34, float{});
		entry.AudioEventGUID_Interact = tableData.getStringField(35, std::string{}.c_str());
		entry.AudioEventGUID_OfferAccept = tableData.getStringField(36, std::string{}.c_str());
		entry.AudioEventGUID_OfferDeny = tableData.getStringField(37, std::string{}.c_str());
		entry.AudioEventGUID_Completed = tableData.getStringField(38, std::string{}.c_str());
		entry.AudioEventGUID_TurnIn = tableData.getStringField(39, std::string{}.c_str());
		entry.AudioEventGUID_Failed = tableData.getStringField(40, std::string{}.c_str());
		entry.AudioEventGUID_Progress = tableData.getStringField(41, std::string{}.c_str());
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDMissionTextTable::~CDMissionTextTable() {
}

std::string CDMissionTextTable::GetName(void) const {
	return "MissionText";
}

std::vector<CDMissionText> CDMissionTextTable::Query(std::function<bool(CDMissionText)> predicate) {
	std::vector<CDMissionText> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDMissionText> CDMissionTextTable::GetEntries(void) const {
	return this->m_entries;
}
