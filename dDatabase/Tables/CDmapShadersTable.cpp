#include "CDmapShadersTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.179416
//DO NOT EDIT THIS FILE MANUALLY!

CDmapShadersTable::CDmapShadersTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM mapShaders");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM mapShaders");
	while (!tableData.eof()) {
		CDmapShaders entry;
		entry.id = tableData.getIntField(0, int{});
		entry.label = tableData.getStringField(1, std::string{}.c_str());
		entry.gameValue = tableData.getIntField(2, int{});
		entry.priority = tableData.getIntField(3, int{});
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDmapShadersTable::~CDmapShadersTable() {
}

std::string CDmapShadersTable::GetName(void) const {
	return "mapShaders";
}

std::vector<CDmapShaders> CDmapShadersTable::Query(std::function<bool(CDmapShaders)> predicate) {
	std::vector<CDmapShaders> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDmapShaders> CDmapShadersTable::GetEntries(void) const {
	return this->m_entries;
}
