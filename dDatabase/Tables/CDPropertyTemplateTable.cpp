#include "CDPropertyTemplateTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.295313
//DO NOT EDIT THIS FILE MANUALLY!

CDPropertyTemplateTable::CDPropertyTemplateTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM PropertyTemplate");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM PropertyTemplate");
	while (!tableData.eof()) {
		CDPropertyTemplate entry;
		entry.id = tableData.getInt64Field(0, uint64_t{});
		entry.mapID = tableData.getInt64Field(1, uint64_t{});
		entry.vendorMapID = tableData.getInt64Field(2, uint64_t{});
		entry.spawnName = tableData.getStringField(3, std::string{}.c_str());
		entry.type = tableData.getIntField(4, int{});
		entry.sizecode = tableData.getIntField(5, int{});
		entry.minimumPrice = tableData.getInt64Field(6, uint64_t{});
		entry.rentDuration = tableData.getInt64Field(7, uint64_t{});
		entry.path = tableData.getStringField(8, std::string{}.c_str());
		entry.name = tableData.getStringField(9, std::string{}.c_str());
		entry.description = tableData.getStringField(10, std::string{}.c_str());
		entry.cloneLimit = tableData.getIntField(11, int{});
		entry.reputationPerVote = tableData.getFloatField(12, float{});
		entry.durationType = tableData.getIntField(13, int{});
		entry.achievementRequired = tableData.getIntField(14, int{});
		entry.zoneX = tableData.getFloatField(15, float{});
		entry.zoneY = tableData.getFloatField(16, float{});
		entry.zoneZ = tableData.getFloatField(17, float{});
		entry.maxBuildHeight = tableData.getFloatField(18, float{});
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDPropertyTemplateTable::~CDPropertyTemplateTable() {
}

std::string CDPropertyTemplateTable::GetName(void) const {
	return "PropertyTemplate";
}

std::vector<CDPropertyTemplate> CDPropertyTemplateTable::Query(std::function<bool(CDPropertyTemplate)> predicate) {
	std::vector<CDPropertyTemplate> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDPropertyTemplate> CDPropertyTemplateTable::GetEntries(void) const {
	return this->m_entries;
}
