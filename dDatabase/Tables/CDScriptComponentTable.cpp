#include "CDScriptComponentTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.404746
//DO NOT EDIT THIS FILE MANUALLY!

CDScriptComponentTable::CDScriptComponentTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM ScriptComponent");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM ScriptComponent");
	while (!tableData.eof()) {
		CDScriptComponent entry;
		entry.id = tableData.getIntField(0, int{});
		entry.script_name = tableData.getStringField(1, std::string{}.c_str());
		entry.client_script_name = tableData.getStringField(2, std::string{}.c_str());
		this->entries.insert(std::make_pair(entry.id, entry));
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDScriptComponentTable::~CDScriptComponentTable() {
}

std::string CDScriptComponentTable::GetName(void) const {
	return "ScriptComponent";
}

std::vector<CDScriptComponent> CDScriptComponentTable::Query(std::function<bool(CDScriptComponent)> predicate) {
	std::vector<CDScriptComponent> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDScriptComponent> CDScriptComponentTable::GetEntries(void) const {
	return this->m_entries;
}

const CDScriptComponent& CDScriptComponentTable::GetByID(int id) {
	std::map<int, CDScriptComponent>::iterator it = this->entries.find(id);
	if (it != this->entries.end()) {
		return it->second;
	}

	return m_default;
}