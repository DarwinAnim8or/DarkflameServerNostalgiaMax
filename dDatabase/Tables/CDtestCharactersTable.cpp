#include "CDtestCharactersTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.450630
//DO NOT EDIT THIS FILE MANUALLY!

CDtestCharactersTable::CDtestCharactersTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM testCharacters");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM testCharacters");
	while (!tableData.eof()) {
		CDtestCharacters entry;
		entry.id = tableData.getInt64Field(0, uint64_t{});
		entry.propertycloneid = tableData.getIntField(1, int{});
		entry.name = tableData.getStringField(2, std::string{}.c_str());
		entry.objid = tableData.getIntField(3, int{});
		entry.timestamp = tableData.getStringField(4, std::string{}.c_str());
		entry.online = tableData.getIntField(5, bool{});
		entry.pendingname = tableData.getStringField(6, std::string{}.c_str());
		entry.requiresrename = tableData.getIntField(7, bool{});
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDtestCharactersTable::~CDtestCharactersTable() {
}

std::string CDtestCharactersTable::GetName(void) const {
	return "testCharacters";
}

std::vector<CDtestCharacters> CDtestCharactersTable::Query(std::function<bool(CDtestCharacters)> predicate) {
	std::vector<CDtestCharacters> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDtestCharacters> CDtestCharactersTable::GetEntries(void) const {
	return this->m_entries;
}
