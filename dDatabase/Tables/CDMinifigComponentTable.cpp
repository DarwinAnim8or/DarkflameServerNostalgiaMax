#include "CDMinifigComponentTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.187405
//DO NOT EDIT THIS FILE MANUALLY!

CDMinifigComponentTable::CDMinifigComponentTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM MinifigComponent");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM MinifigComponent");
	while (!tableData.eof()) {
		CDMinifigComponent entry;
		entry.id = tableData.getIntField(0, int{});
		entry.head = tableData.getIntField(1, int{});
		entry.chest = tableData.getIntField(2, int{});
		entry.legs = tableData.getIntField(3, int{});
		entry.hairstyle = tableData.getIntField(4, int{});
		entry.haircolor = tableData.getIntField(5, int{});
		entry.chestdecal = tableData.getIntField(6, int{});
		entry.headcolor = tableData.getIntField(7, int{});
		entry.lefthand = tableData.getIntField(8, int{});
		entry.righthand = tableData.getIntField(9, int{});
		entry.eyebrowstyle = tableData.getIntField(10, int{});
		entry.eyesstyle = tableData.getIntField(11, int{});
		entry.mouthstyle = tableData.getIntField(12, int{});
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDMinifigComponentTable::~CDMinifigComponentTable() {
}

std::string CDMinifigComponentTable::GetName(void) const {
	return "MinifigComponent";
}

std::vector<CDMinifigComponent> CDMinifigComponentTable::Query(std::function<bool(CDMinifigComponent)> predicate) {
	std::vector<CDMinifigComponent> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDMinifigComponent> CDMinifigComponentTable::GetEntries(void) const {
	return this->m_entries;
}
