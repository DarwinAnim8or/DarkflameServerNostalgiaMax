#include "CDWorldConfigTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.497531
//DO NOT EDIT THIS FILE MANUALLY!

CDWorldConfigTable::CDWorldConfigTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM WorldConfig");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM WorldConfig");
	while (!tableData.eof()) {
		CDWorldConfig entry;
		entry.pegravityvalue = tableData.getFloatField(0, float{});
		entry.pebroadphaseworldsize = tableData.getFloatField(1, float{});
		entry.pegameobjscalefactor = tableData.getFloatField(2, float{});
		entry.character_rotation_speed = tableData.getFloatField(3, float{});
		entry.character_walk_forward_speed = tableData.getFloatField(4, float{});
		entry.character_walk_backward_speed = tableData.getFloatField(5, float{});
		entry.character_walk_strafe_speed = tableData.getFloatField(6, float{});
		entry.character_walk_strafe_forward_speed = tableData.getFloatField(7, float{});
		entry.character_walk_strafe_backward_speed = tableData.getFloatField(8, float{});
		entry.character_run_backward_speed = tableData.getFloatField(9, float{});
		entry.character_run_strafe_speed = tableData.getFloatField(10, float{});
		entry.character_run_strafe_forward_speed = tableData.getFloatField(11, float{});
		entry.character_run_strafe_backward_speed = tableData.getFloatField(12, float{});
		entry.global_cooldown = tableData.getFloatField(13, float{});
		entry.characterGroundedTime = tableData.getFloatField(14, float{});
		entry.characterGroundedSpeed = tableData.getFloatField(15, float{});
		entry.globalImmunityTime = tableData.getFloatField(16, float{});
		entry.character_max_slope = tableData.getFloatField(17, float{});
		entry.defaultrespawntime = tableData.getFloatField(18, float{});
		entry.mission_tooltip_timeout = tableData.getFloatField(19, float{});
		entry.vendor_buy_multiplier = tableData.getFloatField(20, float{});
		entry.pet_follow_radius = tableData.getFloatField(21, float{});
		entry.character_eye_height = tableData.getFloatField(22, float{});
		entry.flight_vertical_velocity = tableData.getFloatField(23, float{});
		entry.flight_airspeed = tableData.getFloatField(24, float{});
		entry.flight_fuel_ratio = tableData.getFloatField(25, float{});
		entry.flight_max_airspeed = tableData.getFloatField(26, float{});
		entry.fReputationPerVote = tableData.getFloatField(27, float{});
		entry.nPropertyCloneLimit = tableData.getIntField(28, int{});
		entry.defaultHomespaceTemplate = tableData.getIntField(29, int{});
		entry.coins_lost_on_death_percent = tableData.getFloatField(30, float{});
		entry.coins_lost_on_death_min = tableData.getIntField(31, int{});
		entry.coins_lost_on_death_max = tableData.getIntField(32, int{});
		entry.character_votes_per_day = tableData.getIntField(33, int{});
		entry.property_moderation_request_approval_cost = tableData.getIntField(34, int{});
		entry.property_moderation_request_review_cost = tableData.getIntField(35, int{});
		entry.propertyModRequestsAllowedSpike = tableData.getIntField(36, int{});
		entry.propertyModRequestsAllowedInterval = tableData.getIntField(37, int{});
		entry.propertyModRequestsAllowedTotal = tableData.getIntField(38, int{});
		entry.propertyModRequestsSpikeDuration = tableData.getIntField(39, int{});
		entry.propertyModRequestsIntervalDuration = tableData.getIntField(40, int{});
		entry.modelModerateOnCreate = tableData.getIntField(41, bool{});
		entry.defaultPropertyMaxHeight = tableData.getFloatField(42, float{});
		entry.reputationPerVoteCast = tableData.getFloatField(43, float{});
		entry.reputationPerVoteReceived = tableData.getFloatField(44, float{});
		entry.showcaseTopModelConsiderationBattles = tableData.getIntField(45, int{});
		entry.reputationPerBattlePromotion = tableData.getFloatField(46, float{});
		entry.coins_lost_on_death_min_timeout = tableData.getFloatField(47, float{});
		entry.coins_lost_on_death_max_timeout = tableData.getFloatField(48, float{});
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDWorldConfigTable::~CDWorldConfigTable() {
}

std::string CDWorldConfigTable::GetName(void) const {
	return "WorldConfig";
}

std::vector<CDWorldConfig> CDWorldConfigTable::Query(std::function<bool(CDWorldConfig)> predicate) {
	std::vector<CDWorldConfig> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDWorldConfig> CDWorldConfigTable::GetEntries(void) const {
	return this->m_entries;
}
