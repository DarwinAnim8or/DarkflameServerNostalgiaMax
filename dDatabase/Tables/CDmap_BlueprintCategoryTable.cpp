#include "CDmap_BlueprintCategoryTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.135465
//DO NOT EDIT THIS FILE MANUALLY!

CDmap_BlueprintCategoryTable::CDmap_BlueprintCategoryTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM map_BlueprintCategory");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM map_BlueprintCategory");
	while (!tableData.eof()) {
		CDmap_BlueprintCategory entry;
		entry.id = tableData.getIntField(0, int{});
		entry.description = tableData.getStringField(1, std::string{}.c_str());
		entry.enabled = tableData.getIntField(2, bool{});
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDmap_BlueprintCategoryTable::~CDmap_BlueprintCategoryTable() {
}

std::string CDmap_BlueprintCategoryTable::GetName(void) const {
	return "map_BlueprintCategory";
}

std::vector<CDmap_BlueprintCategory> CDmap_BlueprintCategoryTable::Query(std::function<bool(CDmap_BlueprintCategory)> predicate) {
	std::vector<CDmap_BlueprintCategory> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDmap_BlueprintCategory> CDmap_BlueprintCategoryTable::GetEntries(void) const {
	return this->m_entries;
}
