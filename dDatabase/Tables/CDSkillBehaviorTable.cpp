#include "CDSkillBehaviorTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.410733
//DO NOT EDIT THIS FILE MANUALLY!

CDSkillBehaviorTable::CDSkillBehaviorTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM SkillBehavior");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM SkillBehavior");
	while (!tableData.eof()) {
		CDSkillBehavior entry;
		entry.skillID = tableData.getIntField(0, int{});
		entry.behaviorID = tableData.getIntField(1, int{});
		entry.name = tableData.getStringField(2, std::string{}.c_str());
		entry.description = tableData.getStringField(3, std::string{}.c_str());
		entry.imaginationcost = tableData.getIntField(4, int{});
		entry.cooldowngroup = tableData.getIntField(5, int{});
		entry.cooldown = tableData.getFloatField(6, float{});
		entry.inNpcEditor = tableData.getIntField(7, bool{});
		entry.skillIcon = tableData.getIntField(8, int{});
		entry.oomSkillID = tableData.getStringField(9, std::string{}.c_str());
		entry.oomBehaviorEffectID = tableData.getIntField(10, int{});
		entry.castTypeDesc = tableData.getIntField(11, int{});
		entry.imBonusUI = tableData.getIntField(12, int{});
		entry.lifeBonusUI = tableData.getIntField(13, int{});
		entry.armorBonusUI = tableData.getIntField(14, int{});
		entry.imHealUI = tableData.getIntField(15, int{});
		entry.lifeHealUI = tableData.getIntField(16, int{});
		entry.armorHealUI = tableData.getIntField(17, int{});
		entry.damageUI = tableData.getIntField(18, int{});
		entry.descriptionUI = tableData.getStringField(19, std::string{}.c_str());
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDSkillBehaviorTable::~CDSkillBehaviorTable() {
}

std::string CDSkillBehaviorTable::GetName(void) const {
	return "SkillBehavior";
}

std::vector<CDSkillBehavior> CDSkillBehaviorTable::Query(std::function<bool(CDSkillBehavior)> predicate) {
	std::vector<CDSkillBehavior> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDSkillBehavior> CDSkillBehaviorTable::GetEntries(void) const {
	return this->m_entries;
}
