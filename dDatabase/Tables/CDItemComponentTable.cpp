#include "CDItemComponentTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:32.999829
//DO NOT EDIT THIS FILE MANUALLY!

CDItemComponentTable::CDItemComponentTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM ItemComponent");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM ItemComponent");
	while (!tableData.eof()) {
		CDItemComponent entry;
		entry.id = tableData.getIntField(0, int{});
		entry.equipLocation = tableData.getStringField(1, std::string{}.c_str());
		entry.baseValue = tableData.getIntField(2, int{});
		entry.isKitPiece = tableData.getIntField(3, bool{});
		entry.rarity = tableData.getIntField(4, int{});
		entry.itemType = tableData.getIntField(5, int{});
		entry.itemInfo = tableData.getIntField(6, int{});
		entry.inLootTable = tableData.getIntField(7, bool{});
		entry.inVendor = tableData.getIntField(8, bool{});
		entry.isUnique = tableData.getIntField(9, bool{});
		entry.isBOP = tableData.getIntField(10, bool{});
		entry.isBOE = tableData.getIntField(11, bool{});
		entry.reqFactionID = tableData.getIntField(12, int{});
		entry.reqSpecialtyID = tableData.getIntField(13, int{});
		entry.reqSpecRank = tableData.getIntField(14, int{});
		entry.reqAchievementID = tableData.getIntField(15, int{});
		entry.stackSize = tableData.getIntField(16, int{});
		entry.color1 = tableData.getIntField(17, int{});
		entry.decal = tableData.getIntField(18, int{});
		entry.offsetGroupID = tableData.getIntField(19, int{});
		entry.buildTypes = tableData.getIntField(20, int{});
		entry.reqPrecondition = tableData.getStringField(21, std::string{}.c_str());
		entry.weaponType = tableData.getIntField(22, int{});
		entry.equipEffects = tableData.getIntField(23, int{});
		entry.readyForQA = tableData.getIntField(24, bool{});
		entry.itemRating = tableData.getIntField(25, int{});
		entry.isTwoHanded = tableData.getIntField(26, bool{});
		entry.minNumRequired = tableData.getIntField(27, int{});
		entry.delResIndex = tableData.getIntField(28, int{});
		entry.currencyLOT = tableData.getIntField(29, int{});
		entry.altCurrencyCost = tableData.getIntField(30, int{});
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDItemComponentTable::~CDItemComponentTable() {
}

std::string CDItemComponentTable::GetName(void) const {
	return "ItemComponent";
}

std::vector<CDItemComponent> CDItemComponentTable::Query(std::function<bool(CDItemComponent)> predicate) {
	std::vector<CDItemComponent> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDItemComponent> CDItemComponentTable::GetEntries(void) const {
	return this->m_entries;
}
