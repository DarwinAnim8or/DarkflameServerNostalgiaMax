#include "CDTamingBuildPuzzlesTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.446634
//DO NOT EDIT THIS FILE MANUALLY!

CDTamingBuildPuzzlesTable::CDTamingBuildPuzzlesTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM TamingBuildPuzzles");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM TamingBuildPuzzles");
	while (!tableData.eof()) {
		CDTamingBuildPuzzles entry;
		entry.id = tableData.getIntField(0, int{});
		entry.PuzzleModelLot = tableData.getIntField(1, int{});
		entry.NPCLot = tableData.getIntField(2, int{});
		entry.ValidPiecesLXF = tableData.getStringField(3, std::string{}.c_str());
		entry.InvalidPiecesLXF = tableData.getStringField(4, std::string{}.c_str());
		entry.Difficulty = tableData.getIntField(5, int{});
		entry.Timelimit = tableData.getIntField(6, int{});
		entry.NumValidPieces = tableData.getIntField(7, int{});
		entry.TotalNumPieces = tableData.getIntField(8, int{});
		entry.ModelName = tableData.getStringField(9, std::string{}.c_str());
		entry.FullModelLXF = tableData.getStringField(10, std::string{}.c_str());
		entry.Duration = tableData.getFloatField(11, float{});
		entry.imagCostPerBuild = tableData.getIntField(12, int{});
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDTamingBuildPuzzlesTable::~CDTamingBuildPuzzlesTable() {
}

std::string CDTamingBuildPuzzlesTable::GetName(void) const {
	return "TamingBuildPuzzles";
}

std::vector<CDTamingBuildPuzzles> CDTamingBuildPuzzlesTable::Query(std::function<bool(CDTamingBuildPuzzles)> predicate) {
	std::vector<CDTamingBuildPuzzles> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDTamingBuildPuzzles> CDTamingBuildPuzzlesTable::GetEntries(void) const {
	return this->m_entries;
}
