#include "CDRebuildSectionsTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.367845
//DO NOT EDIT THIS FILE MANUALLY!

CDRebuildSectionsTable::CDRebuildSectionsTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM RebuildSections");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM RebuildSections");
	while (!tableData.eof()) {
		CDRebuildSections entry;
		entry.id = tableData.getIntField(0, int{});
		entry.rebuildID = tableData.getIntField(1, int{});
		entry.objectID = tableData.getIntField(2, int{});
		entry.offset_x = tableData.getFloatField(3, float{});
		entry.offset_y = tableData.getFloatField(4, float{});
		entry.offset_z = tableData.getFloatField(5, float{});
		entry.fall_angle_x = tableData.getFloatField(6, float{});
		entry.fall_angle_y = tableData.getFloatField(7, float{});
		entry.fall_angle_z = tableData.getFloatField(8, float{});
		entry.fall_height = tableData.getFloatField(9, float{});
		entry.requires_list = tableData.getStringField(10, std::string{}.c_str());
		entry.size = tableData.getIntField(11, int{});
		entry.bPlaced = tableData.getIntField(12, bool{});
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDRebuildSectionsTable::~CDRebuildSectionsTable() {
}

std::string CDRebuildSectionsTable::GetName(void) const {
	return "RebuildSections";
}

std::vector<CDRebuildSections> CDRebuildSectionsTable::Query(std::function<bool(CDRebuildSections)> predicate) {
	std::vector<CDRebuildSections> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDRebuildSections> CDRebuildSectionsTable::GetEntries(void) const {
	return this->m_entries;
}
