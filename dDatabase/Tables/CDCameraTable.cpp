#include "CDCameraTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:32.908279
//DO NOT EDIT THIS FILE MANUALLY!

CDCameraTable::CDCameraTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM Camera");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM Camera");
	while (!tableData.eof()) {
		CDCamera entry;
		entry.camera_name = tableData.getStringField(0, std::string{}.c_str());
		entry.pitch_angle_tolerance = tableData.getFloatField(1, float{});
		entry.starting_zoom = tableData.getFloatField(2, float{});
		entry.zoom_return_modifier = tableData.getFloatField(3, float{});
		entry.pitch_return_modifier = tableData.getFloatField(4, float{});
		entry.tether_out_return_modifier = tableData.getFloatField(5, float{});
		entry.tether_in_return_multiplier = tableData.getFloatField(6, float{});
		entry.verticle_movement_dampening_modifier = tableData.getFloatField(7, float{});
		entry.return_from_incline_modifier = tableData.getFloatField(8, float{});
		entry.horizontal_return_modifier = tableData.getFloatField(9, float{});
		entry.yaw_behavior_speed_multiplier = tableData.getFloatField(10, float{});
		entry.camera_collision_padding = tableData.getFloatField(11, float{});
		entry.glide_speed = tableData.getFloatField(12, float{});
		entry.fade_player_min_range = tableData.getFloatField(13, float{});
		entry.min_movement_delta_tolerance = tableData.getFloatField(14, float{});
		entry.min_glide_distance_tolerance = tableData.getFloatField(15, float{});
		entry.look_forward_offset = tableData.getFloatField(16, float{});
		entry.look_up_offset = tableData.getFloatField(17, float{});
		entry.minimum_vertical_dampening_distance = tableData.getFloatField(18, float{});
		entry.maximum_vertical_dampening_distance = tableData.getFloatField(19, float{});
		entry.minimum_ignore_jump_distance = tableData.getFloatField(20, float{});
		entry.maximum_ignore_jump_distance = tableData.getFloatField(21, float{});
		entry.maximum_auto_glide_angle = tableData.getFloatField(22, float{});
		entry.minimum_tether_glide_distance = tableData.getFloatField(23, float{});
		entry.yaw_sign_correction = tableData.getFloatField(24, float{});
		entry.set_1_look_forward_offset = tableData.getFloatField(25, float{});
		entry.set_1_look_up_offset = tableData.getFloatField(26, float{});
		entry.set_2_look_forward_offset = tableData.getFloatField(27, float{});
		entry.set_2_look_up_offset = tableData.getFloatField(28, float{});
		entry.set_0_speed_influence_on_dir = tableData.getFloatField(29, float{});
		entry.set_1_speed_influence_on_dir = tableData.getFloatField(30, float{});
		entry.set_2_speed_influence_on_dir = tableData.getFloatField(31, float{});
		entry.set_0_angular_relaxation = tableData.getFloatField(32, float{});
		entry.set_1_angular_relaxation = tableData.getFloatField(33, float{});
		entry.set_2_angular_relaxation = tableData.getFloatField(34, float{});
		entry.set_0_position_up_offset = tableData.getFloatField(35, float{});
		entry.set_1_position_up_offset = tableData.getFloatField(36, float{});
		entry.set_2_position_up_offset = tableData.getFloatField(37, float{});
		entry.set_0_position_forward_offset = tableData.getFloatField(38, float{});
		entry.set_1_position_forward_offset = tableData.getFloatField(39, float{});
		entry.set_2_position_forward_offset = tableData.getFloatField(40, float{});
		entry.set_0_FOV = tableData.getFloatField(41, float{});
		entry.set_1_FOV = tableData.getFloatField(42, float{});
		entry.set_2_FOV = tableData.getFloatField(43, float{});
		entry.set_0_max_yaw_angle = tableData.getFloatField(44, float{});
		entry.set_1_max_yaw_angle = tableData.getFloatField(45, float{});
		entry.set_2_max_yaw_angle = tableData.getFloatField(46, float{});
		entry.set_1_fade_in_camera_set_change = tableData.getIntField(47, int{});
		entry.set_1_fade_out_camera_set_change = tableData.getIntField(48, int{});
		entry.set_2_fade_in_camera_set_change = tableData.getIntField(49, int{});
		entry.set_2_fade_out_camera_set_change = tableData.getIntField(50, int{});
		entry.input_movement_scalar = tableData.getFloatField(51, float{});
		entry.input_rotation_scalar = tableData.getFloatField(52, float{});
		entry.input_zoom_scalar = tableData.getFloatField(53, float{});
		entry.minimum_pitch_desired = tableData.getFloatField(54, float{});
		entry.maximum_pitch_desired = tableData.getFloatField(55, float{});
		entry.minimum_zoom = tableData.getFloatField(56, float{});
		entry.maximum_zoom = tableData.getFloatField(57, float{});
		entry.horizontal_rotate_tolerance = tableData.getFloatField(58, float{});
		entry.horizontal_rotate_modifier = tableData.getFloatField(59, float{});
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDCameraTable::~CDCameraTable() {
}

std::string CDCameraTable::GetName(void) const {
	return "Camera";
}

std::vector<CDCamera> CDCameraTable::Query(std::function<bool(CDCamera)> predicate) {
	std::vector<CDCamera> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDCamera> CDCameraTable::GetEntries(void) const {
	return this->m_entries;
}
