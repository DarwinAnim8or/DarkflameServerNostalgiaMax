#include "CDModularBuildComponentTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.229216
//DO NOT EDIT THIS FILE MANUALLY!

CDModularBuildComponentTable::CDModularBuildComponentTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM ModularBuildComponent");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM ModularBuildComponent");
	while (!tableData.eof()) {
		CDModularBuildComponent entry;
		entry.id = tableData.getIntField(0, int{});
		entry.buildType = tableData.getIntField(1, int{});
		entry.xml = tableData.getStringField(2, "");
		entry.createdLOT = tableData.getIntField(3, int{});
		entry.createdPhysicsID = tableData.getIntField(4, int{});
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDModularBuildComponentTable::~CDModularBuildComponentTable() {
}

std::string CDModularBuildComponentTable::GetName(void) const {
	return "ModularBuildComponent";
}

std::vector<CDModularBuildComponent> CDModularBuildComponentTable::Query(std::function<bool(CDModularBuildComponent)> predicate) {
	std::vector<CDModularBuildComponent> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDModularBuildComponent> CDModularBuildComponentTable::GetEntries(void) const {
	return this->m_entries;
}
