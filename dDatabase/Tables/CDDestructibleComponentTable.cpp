#include "CDDestructibleComponentTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:32.955944
//DO NOT EDIT THIS FILE MANUALLY!

CDDestructibleComponentTable::CDDestructibleComponentTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM DestructibleComponent");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM DestructibleComponent");
	while (!tableData.eof()) {
		CDDestructibleComponent entry;
		entry.id = tableData.getIntField(0, int{});
		entry.faction = tableData.getIntField(1, int{});
		entry.life = tableData.getIntField(2, int{});
		entry.imagination = tableData.getIntField(3, int{});
		entry.LootMatrixIndex = tableData.getIntField(4, int{});
		entry.CurrencyIndex = tableData.getIntField(5, int{});
		entry.level = tableData.getIntField(6, int{});
		entry.armor = tableData.getFloatField(7, float{});
		entry.death_behavior = tableData.getIntField(8, int{});
		entry.protection_disruption = tableData.getFloatField(9, float{});
		entry.protection_elemental = tableData.getFloatField(10, float{});
		entry.protection_physical = tableData.getFloatField(11, float{});
		entry.isnpc = tableData.getIntField(12, bool{});
		entry.attack_priority = tableData.getIntField(13, int{});
		entry.isSmashable = tableData.getIntField(14, bool{});
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDDestructibleComponentTable::~CDDestructibleComponentTable() {
}

std::string CDDestructibleComponentTable::GetName(void) const {
	return "DestructibleComponent";
}

std::vector<CDDestructibleComponent> CDDestructibleComponentTable::Query(std::function<bool(CDDestructibleComponent)> predicate) {
	std::vector<CDDestructibleComponent> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDDestructibleComponent> CDDestructibleComponentTable::GetEntries(void) const {
	return this->m_entries;
}
