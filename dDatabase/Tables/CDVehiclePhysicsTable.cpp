#include "CDVehiclePhysicsTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.469647
//DO NOT EDIT THIS FILE MANUALLY!

CDVehiclePhysicsTable::CDVehiclePhysicsTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM VehiclePhysics");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM VehiclePhysics");
	while (!tableData.eof()) {
		CDVehiclePhysics entry;
		entry.id = tableData.getIntField(0, int{});
		entry.name = tableData.getStringField(1, std::string{}.c_str());
		entry.hkxFilename = tableData.getStringField(2, std::string{}.c_str());
		entry.fGravityScale = tableData.getFloatField(3, float{});
		entry.fMass = tableData.getFloatField(4, float{});
		entry.fChassisFriction = tableData.getFloatField(5, float{});
		entry.fMaxSpeed = tableData.getFloatField(6, float{});
		entry.fEngineTorque = tableData.getFloatField(7, float{});
		entry.fBrakeFrontTorque = tableData.getFloatField(8, float{});
		entry.fBrakeRearTorque = tableData.getFloatField(9, float{});
		entry.fBrakeMinInputToBlock = tableData.getFloatField(10, float{});
		entry.fBrakeMinTimeToBlock = tableData.getFloatField(11, float{});
		entry.fSteeringMaxAngle = tableData.getFloatField(12, float{});
		entry.fSteeringSpeedLimitForMaxAngle = tableData.getFloatField(13, float{});
		entry.fSteeringMinAngle = tableData.getFloatField(14, float{});
		entry.fFwdBias = tableData.getFloatField(15, float{});
		entry.fFrontTireFriction = tableData.getFloatField(16, float{});
		entry.fRearTireFriction = tableData.getFloatField(17, float{});
		entry.fFrontTireFrictionSlide = tableData.getFloatField(18, float{});
		entry.fRearTireFrictionSlide = tableData.getFloatField(19, float{});
		entry.fFrontTireSlipAngle = tableData.getFloatField(20, float{});
		entry.fRearTireSlipAngle = tableData.getFloatField(21, float{});
		entry.fWheelWidth = tableData.getFloatField(22, float{});
		entry.fWheelRadius = tableData.getFloatField(23, float{});
		entry.fWheelMass = tableData.getFloatField(24, float{});
		entry.fReorientPitchStrength = tableData.getFloatField(25, float{});
		entry.fReorientRollStrength = tableData.getFloatField(26, float{});
		entry.fSuspensionLength = tableData.getFloatField(27, float{});
		entry.fSuspensionStrength = tableData.getFloatField(28, float{});
		entry.fSuspensionDampingCompression = tableData.getFloatField(29, float{});
		entry.fSuspensionDampingRelaxation = tableData.getFloatField(30, float{});
		entry.iChassisCollisionGroup = tableData.getIntField(31, int{});
		entry.fNormalSpinDamping = tableData.getFloatField(32, float{});
		entry.fCollisionSpinDamping = tableData.getFloatField(33, float{});
		entry.fCollisionThreshold = tableData.getFloatField(34, float{});
		entry.fTorqueRollFactor = tableData.getFloatField(35, float{});
		entry.fTorquePitchFactor = tableData.getFloatField(36, float{});
		entry.fTorqueYawFactor = tableData.getFloatField(37, float{});
		entry.fInertiaRoll = tableData.getFloatField(38, float{});
		entry.fInertiaPitch = tableData.getFloatField(39, float{});
		entry.fInertiaYaw = tableData.getFloatField(40, float{});
		entry.fExtraTorqueFactor = tableData.getFloatField(41, float{});
		entry.fCenterOfMassFwd = tableData.getFloatField(42, float{});
		entry.fCenterOfMassUp = tableData.getFloatField(43, float{});
		entry.fCenterOfMassRight = tableData.getFloatField(44, float{});
		entry.fWheelHardpointFrontFwd = tableData.getFloatField(45, float{});
		entry.fWheelHardpointFrontUp = tableData.getFloatField(46, float{});
		entry.fWheelHardpointFrontRight = tableData.getFloatField(47, float{});
		entry.fWheelHardpointRearFwd = tableData.getFloatField(48, float{});
		entry.fWheelHardpointRearUp = tableData.getFloatField(49, float{});
		entry.fWheelHardpointRearRight = tableData.getFloatField(50, float{});
		entry.fInputTurnSpeed = tableData.getFloatField(51, float{});
		entry.fInputDeadTurnBackSpeed = tableData.getFloatField(52, float{});
		entry.fInputAccelSpeed = tableData.getFloatField(53, float{});
		entry.fInputDeadAccelDownSpeed = tableData.getFloatField(54, float{});
		entry.fInputDecelSpeed = tableData.getFloatField(55, float{});
		entry.fInputDeadDecelDownSpeed = tableData.getFloatField(56, float{});
		entry.fInputSlopeChangePointX = tableData.getFloatField(57, float{});
		entry.fInputInitialSlope = tableData.getFloatField(58, float{});
		entry.fInputDeadZone = tableData.getFloatField(59, float{});
		entry.fAeroAirDensity = tableData.getFloatField(60, float{});
		entry.fAeroFrontalArea = tableData.getFloatField(61, float{});
		entry.fAeroDragCoefficient = tableData.getFloatField(62, float{});
		entry.fAeroLiftCoefficient = tableData.getFloatField(63, float{});
		entry.fAeroExtraGravity = tableData.getFloatField(64, float{});
		entry.fBoostTopSpeed = tableData.getFloatField(65, float{});
		entry.fBoostCostPerSecond = tableData.getFloatField(66, float{});
		entry.fBoostAccelerateChange = tableData.getFloatField(67, float{});
		entry.fBoostDampingChange = tableData.getFloatField(68, float{});
		entry.fPowerslideNeutralAngle = tableData.getFloatField(69, float{});
		entry.fPowerslideTorqueStrength = tableData.getFloatField(70, float{});
		entry.iPowerslideNumTorqueApplications = tableData.getIntField(71, int{});
		entry.fImaginationTankSize = tableData.getFloatField(72, float{});
		entry.fSkillCost = tableData.getFloatField(73, float{});
		entry.fWreckSpeedBase = tableData.getFloatField(74, float{});
		entry.fWreckSpeedPercent = tableData.getFloatField(75, float{});
		entry.fWreckMinAngle = tableData.getFloatField(76, float{});
		entry.AudioEventEngine = tableData.getStringField(77, std::string{}.c_str());
		entry.AudioEventSkid = tableData.getStringField(78, std::string{}.c_str());
		entry.AudioEventLightHit = tableData.getStringField(79, std::string{}.c_str());
		entry.AudioSpeedThresholdLightHit = tableData.getFloatField(80, float{});
		entry.AudioTimeoutLightHit = tableData.getFloatField(81, float{});
		entry.AudioEventHeavyHit = tableData.getStringField(82, std::string{}.c_str());
		entry.AudioSpeedThresholdHeavyHit = tableData.getFloatField(83, float{});
		entry.AudioTimeoutHeavyHit = tableData.getFloatField(84, float{});
		entry.AudioEventStart = tableData.getStringField(85, std::string{}.c_str());
		entry.AudioEventTreadConcrete = tableData.getStringField(86, std::string{}.c_str());
		entry.AudioEventTreadSand = tableData.getStringField(87, std::string{}.c_str());
		entry.AudioEventTreadWood = tableData.getStringField(88, std::string{}.c_str());
		entry.AudioEventTreadDirt = tableData.getStringField(89, std::string{}.c_str());
		entry.AudioEventTreadPlastic = tableData.getStringField(90, std::string{}.c_str());
		entry.AudioEventTreadGrass = tableData.getStringField(91, std::string{}.c_str());
		entry.AudioEventTreadGravel = tableData.getStringField(92, std::string{}.c_str());
		entry.AudioEventTreadMud = tableData.getStringField(93, std::string{}.c_str());
		entry.AudioEventTreadWater = tableData.getStringField(94, std::string{}.c_str());
		entry.AudioEventTreadSnow = tableData.getStringField(95, std::string{}.c_str());
		entry.AudioEventTreadIce = tableData.getStringField(96, std::string{}.c_str());
		entry.AudioEventTreadMetal = tableData.getStringField(97, std::string{}.c_str());
		entry.AudioEventTreadLeaves = tableData.getStringField(98, std::string{}.c_str());
		entry.AudioEventLightLand = tableData.getStringField(99, std::string{}.c_str());
		entry.AudioAirtimeForLightLand = tableData.getFloatField(100, float{});
		entry.AudioEventHeavyLand = tableData.getStringField(101, std::string{}.c_str());
		entry.AudioAirtimeForHeavyLand = tableData.getFloatField(102, float{});
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDVehiclePhysicsTable::~CDVehiclePhysicsTable() {
}

std::string CDVehiclePhysicsTable::GetName(void) const {
	return "VehiclePhysics";
}

std::vector<CDVehiclePhysics> CDVehiclePhysicsTable::Query(std::function<bool(CDVehiclePhysics)> predicate) {
	std::vector<CDVehiclePhysics> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDVehiclePhysics> CDVehiclePhysicsTable::GetEntries(void) const {
	return this->m_entries;
}
