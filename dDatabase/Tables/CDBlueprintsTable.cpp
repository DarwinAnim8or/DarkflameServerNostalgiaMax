#include "CDBlueprintsTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:32.893113
//DO NOT EDIT THIS FILE MANUALLY!

CDBlueprintsTable::CDBlueprintsTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM Blueprints");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM Blueprints");
	while (!tableData.eof()) {
		CDBlueprints entry;
		entry.id = tableData.getInt64Field(0, uint64_t{});
		entry.name = tableData.getStringField(1, std::string{}.c_str());
		entry.description = tableData.getStringField(2, std::string{}.c_str());
		entry.accountid = tableData.getInt64Field(3, uint64_t{});
		entry.characterid = tableData.getInt64Field(4, uint64_t{});
		entry.price = tableData.getIntField(5, int{});
		entry.rating = tableData.getIntField(6, int{});
		entry.categoryid = tableData.getIntField(7, int{});
		entry.lxfpath = tableData.getStringField(8, std::string{}.c_str());
		entry.deleted = tableData.getIntField(9, bool{});
		entry.created = tableData.getStringField(10, std::string{}.c_str());
		entry.modified = tableData.getStringField(11, std::string{}.c_str());
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDBlueprintsTable::~CDBlueprintsTable() {
}

std::string CDBlueprintsTable::GetName(void) const {
	return "Blueprints";
}

std::vector<CDBlueprints> CDBlueprintsTable::Query(std::function<bool(CDBlueprints)> predicate) {
	std::vector<CDBlueprints> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDBlueprints> CDBlueprintsTable::GetEntries(void) const {
	return this->m_entries;
}
