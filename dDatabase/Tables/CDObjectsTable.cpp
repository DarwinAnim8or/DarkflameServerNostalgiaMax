#include "CDObjectsTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.248170
//DO NOT EDIT THIS FILE MANUALLY!

CDObjectsTable::CDObjectsTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM Objects");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM Objects");
	while (!tableData.eof()) {
		CDObjects entry;
		entry.id = tableData.getIntField(0, int{});
		entry.name = tableData.getStringField(1, std::string{}.c_str());
		entry.placeable = tableData.getIntField(2, bool{});
		entry.type = tableData.getStringField(3, std::string{}.c_str());
		entry.description = tableData.getStringField(4, std::string{}.c_str());
		entry.localize = tableData.getIntField(5, bool{});
		entry.npcTemplateID = tableData.getIntField(6, int{});
		entry.displayName = tableData.getStringField(7, std::string{}.c_str());
		entry.interactionDistance = tableData.getFloatField(8, float{});
		entry.nametag = tableData.getIntField(9, bool{});
		this->m_entries.push_back(entry);
		this->m_mappedEntries.insert(std::make_pair(entry.id, entry));
		tableData.nextRow();
	}

	tableData.finalize();
}

CDObjectsTable::~CDObjectsTable() {
}

std::string CDObjectsTable::GetName(void) const {
	return "Objects";
}

std::vector<CDObjects> CDObjectsTable::Query(std::function<bool(CDObjects)> predicate) {
	std::vector<CDObjects> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDObjects> CDObjectsTable::GetEntries(void) const {
	return this->m_entries;
}

CDObjects CDObjectsTable::GetByID(unsigned int lot) {
	const auto& it = this->m_mappedEntries.find(lot);
	if (it != this->m_mappedEntries.end()) {
		return it->second;
	}

	return m_default;
}