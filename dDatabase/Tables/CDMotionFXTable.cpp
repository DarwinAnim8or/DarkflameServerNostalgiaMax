#include "CDMotionFXTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.233215
//DO NOT EDIT THIS FILE MANUALLY!

CDMotionFXTable::CDMotionFXTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM MotionFX");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM MotionFX");
	while (!tableData.eof()) {
		CDMotionFX entry;
		entry.id = tableData.getIntField(0, int{});
		entry.typeID = tableData.getIntField(1, int{});
		entry.slamVelocity = tableData.getFloatField(2, float{});
		entry.addVelocity = tableData.getFloatField(3, float{});
		entry.duration = tableData.getFloatField(4, float{});
		entry.destGroupName = tableData.getStringField(5, std::string{}.c_str());
		entry.startScale = tableData.getFloatField(6, float{});
		entry.endScale = tableData.getFloatField(7, float{});
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDMotionFXTable::~CDMotionFXTable() {
}

std::string CDMotionFXTable::GetName(void) const {
	return "MotionFX";
}

std::vector<CDMotionFX> CDMotionFXTable::Query(std::function<bool(CDMotionFX)> predicate) {
	std::vector<CDMotionFX> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDMotionFX> CDMotionFXTable::GetEntries(void) const {
	return this->m_entries;
}
