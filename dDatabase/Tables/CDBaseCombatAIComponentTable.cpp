#include "CDBaseCombatAIComponentTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:32.872243
//DO NOT EDIT THIS FILE MANUALLY!

CDBaseCombatAIComponentTable::CDBaseCombatAIComponentTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM BaseCombatAIComponent");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM BaseCombatAIComponent");
	while (!tableData.eof()) {
		CDBaseCombatAIComponent entry;
		entry.id = tableData.getIntField(0, int{});
		entry.behaviorType = tableData.getIntField(1, int{});
		entry.combatRoundLength = tableData.getFloatField(2, float{});
		entry.combatRole = tableData.getIntField(3, int{});
		entry.minRoundLength = tableData.getFloatField(4, float{});
		entry.maxRoundLength = tableData.getFloatField(5, float{});
		entry.tetherSpeed = tableData.getFloatField(6, float{});
		entry.pursuitSpeed = tableData.getFloatField(7, float{});
		entry.combatStartDelay = tableData.getFloatField(8, float{});
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDBaseCombatAIComponentTable::~CDBaseCombatAIComponentTable() {
}

std::string CDBaseCombatAIComponentTable::GetName(void) const {
	return "BaseCombatAIComponent";
}

std::vector<CDBaseCombatAIComponent> CDBaseCombatAIComponentTable::Query(std::function<bool(CDBaseCombatAIComponent)> predicate) {
	std::vector<CDBaseCombatAIComponent> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDBaseCombatAIComponent> CDBaseCombatAIComponentTable::GetEntries(void) const {
	return this->m_entries;
}
