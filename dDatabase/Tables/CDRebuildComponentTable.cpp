#include "CDRebuildComponentTable.h"
//Generated by xmlDb2dDatabaseGenerator on 2022-03-04 00:23:33.355876
//DO NOT EDIT THIS FILE MANUALLY!

CDRebuildComponentTable::CDRebuildComponentTable() {
	unsigned int size = 0;
	auto tableSize = CDClientDatabase::ExecuteQuery("SELECT COUNT(*) FROM RebuildComponent");
		while (!tableSize.eof()) {
		size = tableSize.getIntField(0, 0);
		tableSize.nextRow();
	}

	tableSize.finalize();
	this->m_entries.reserve(size);

	auto tableData = CDClientDatabase::ExecuteQuery("SELECT * FROM RebuildComponent");
	while (!tableData.eof()) {
		CDRebuildComponent entry;
		entry.id = tableData.getIntField(0, int{});
		entry.reset_time = tableData.getFloatField(1, float{});
		entry.complete_time = tableData.getFloatField(2, float{});
		entry.take_imagination = tableData.getIntField(3, int{});
		entry.interruptible = tableData.getIntField(4, bool{});
		entry.self_activator = tableData.getIntField(5, bool{});
		entry.custom_modules = tableData.getStringField(6, std::string{}.c_str());
		entry.prerequisite_imagination = tableData.getIntField(7, int{});
		entry.activityID = tableData.getIntField(8, int{});
		this->m_entries.push_back(entry);
		tableData.nextRow();
	}

	tableData.finalize();
}

CDRebuildComponentTable::~CDRebuildComponentTable() {
}

std::string CDRebuildComponentTable::GetName(void) const {
	return "RebuildComponent";
}

std::vector<CDRebuildComponent> CDRebuildComponentTable::Query(std::function<bool(CDRebuildComponent)> predicate) {
	std::vector<CDRebuildComponent> data = cpplinq::from(this->m_entries)
		>> cpplinq::where(predicate)
		>> cpplinq::to_vector();

	return data;
}

std::vector<CDRebuildComponent> CDRebuildComponentTable::GetEntries(void) const {
	return this->m_entries;
}
